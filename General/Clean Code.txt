  (0)General 

 • Avoid Negative Conditionals - Negatives are just a bit harder to understand than positives. So, when possible, conditionals should be expressed as positives. 
For example: 
if (buffer.shouldCompact()) is preferable to
if (!buffer.shouldNotCompact())

 • Consistency - If you do something a certain way, do all similar things in the same way.
❌BAD 
daysInAWeek
daysInamonth
daysInAyear
✔️GOOD 
daysInAWeek
daysInAMonth
daysInAYear

 • Single language in one source file - files should be aimed to contain one language. 

 • Duplication : one of the most important clean code rules - Don't Repeat Yourself

 •  The Boys Scout Rule - always leave the code better than you found it, improve it. 

 •  The author should write the code so that everyone will have an easy time to understand it. 

 • Dead code : code that isn't used is wasteful and should be discarded. Keep your source files clean and well organized. 

 (1) Meaningful Names

 • Use Intention-Revealing Names
❌ int d; // elapsed time in days
✔️ int elapsedTimeInDays;
 • Use Pronounceable Names

 • Use Searchable Names
❌ NOT Searchable name  - Date isn't unique 
setRemainderForDate( Date ) 

✔️ Searchable - enterDate is unique
setRemainderForDate( enterDate )

 •  Class names - use nouns
✔️ class Battery() 

 •  Functions names - use verbs 
✔️ function getBatteryModel() 

 • Pick One Word per Concept 
❌ = two concepts (add+insert) for instance:
addBatteryAge
InsertBatteryModel
✔️ = one concept (append) for instance :
appendBatteryAge
appendBatteryModel

 •  For different Concepts use different words
✔️ = first concept (Battery) - append
appendBatteryAge
appendBatteryModel 
✔️ = second concept (Car) word - Insert
insertCarAge
insertCarModel

 • Shorter names are generally better than longer ones, as long as they are clear

 (2) Functions - Should be small and do one thing.

 •  Functions should either do something or answer something, but not both. 

 • Function Arguments - Less arguments are better
function example(age) - best
function example(age, name) - good
function example(age, name, address) - ok

 •   Functions Shouldn't have more than 3 arguments,if a function have more than 3 it should be split to another function. 

 • Flag (bool) Arguments Should be separated
❌Bad - 
bool IsMale = True/False
 if ( isMale ) 
GetAverageAge( isMale )
else
GetAverageAge( !isMale )

✔️Good -
bool IsMale = True/False
if ( isMale ) 
GetMaleAverageAge() 
else 
GetFemaleAverageAge() 

 (3) Comments - 

 •  If you must add comment to understand your code it means the code is written poorly go back and clean it up. 
❌Bad code 
// Check to see if the employee is eligible for full benefits 
if ((employee.flags & HOURLY_FLAG) &&     (employee.age > 65)) 
✔️Good code
if (employee.isEligibleForFullBenefits())

 •  The proper use of comments is usually to compensate for our failure to express ourself in code

 • Clear and expressive code with few comments is far superior to cluttered and complex code with lots of comments. 

 •  Code is meant to evolve, too often the comments are left behind and become misleading 

 •  Inobvious - If you decide to write a comment then spend the time necessary to make sure it's the best comment you can write. 
Any comment that forces you to look in another module, failed to communicate you. 

-------Valid reasons to use comments-------

 • Explanation of intent -  used for the programmer to explain the intent/reason behind a decision he made

 • Clarification/Informative Comments 
// enterDate format -  dd, mm, yyyy
setRemainderForDate( enterDate ) 

 • TODO comments - It's reasonable to leave “To do” notes in the form of  //TODO. 
TODOs are jobs that the programmer thinks should be done to the code. 

 • Amplification  - A comment may be used to amplify the importance of something that may otherwise seem inconsequential.

(4) Formatting - 

 • Variable Declarations - Variables should be declared as close to their usage as possible

 • Dependent Functions - If one function calls another, they should be vertically close, The caller should be above the one that have been called

 • Shared concept - group of functions that perform a similar operation should be close to each other.

 •  Horizontal Line - A rule of thumb is that a line should not contain more than 80 - 120 characters 

 • Horizontal Openness and Density - We use horizontal white space to associate things that are strongly related
❌ Bad
var x=5
✔️ Good 
var x = 5

 •  Team Rules - A team of developers working together should agree upon the same formatting style 

(5) Error handling - 

 •  Use Exceptions Rather  Than Return Codes

 • Write Your  Try-Catch-Finally  Statement First - try blocks are like transactions.  Your  catch has to leave your program in a consistent state, no matter what happens in the try.

 • Use Unchecked Exceptions 

 • Provide Context with Exceptions - Create informative error messages that provide enough context to determine the source and location of an error.

 • SPECIAL  CASE  PATTERN -  You create a class or configure an object so that it handles an error for you

 • Don't return null - If you are tempted to return null from a method, consider throwing an exception or returning a SPECIAL  CASE object instead

 • Don't pass null - Returning  null from methods is bad, but passing  null into methods is worse. Unless you are working with an  API which expects you to pass  null, you should avoid passing  null  in your code whenever possible. 

 (6) Classes - 

 • Classes should be small - If we cannot derive a concise name for a class, then it’s likely too large.

 • A Class should have one and only responsibility

 • A Number of small classes are better than a single large one

 (7) Emergence - 3 simple rules for creating good project

 • Rule 1:  Runs All the  Tests - The fact that we have these tests eliminates the fear that cleaning up the code will break it!

 • Rule 2: Refactoring - For each few lines of code we add, we pause and reflect on the new design. Did we just degrade it? If so, we clean it up and run our tests to demonstrate that we haven’t broken anything

 • Rule 3: No Duplication - Creating a clean system requires the will to eliminate duplication, even in just a few lines of code

 • Bonus: Expressive - code should clearly express the intent of its author.  The clearer the author can make the code, the less time others will have to spend understanding it. Spend a little time with each of your functions and classes. Choose better names, split large functions into smaller functions, and generally just take care of what you’ve created. 
