• when a new Template folder created ,update TEMPLATES in config/settings

-----Django-------
http://127.0.0.1:8000/ # website local location
Django request/response cycle:
URL -> View -> Model (typically) -> Template

• admin.py is a configuration file for the built-in Django Admin app
• apps.py is a configuration file for the app itself
• migrations/ keeps track of any changes to our models.py file so our database and models.py stay in sync
• models.py is where we define our database models which Django automatically translates into database tables
• tests.py is for our app-specific tests
• views.py is where we handle the request/response logic for our web app
• forms.py takes user input and sends it to a URL via either a GET or POST method.

-------------[Guide] 
• enable Email services
• change time zone
• login/logout configuration
• custom user Model configuration
• Html 

[login/logout configuration]
<1.login/logout created
2.add a success login redirect in config/settings.py
LOGIN_REDIRECT_URL = 'home'
LOGOUT_REDIRECT_URL = 'home'
/>

[Custom user model]
<1.create user create & change forms
2.update config/settings.py 
AUTH_USER_MODEL = 'appName.CustomUser' # 
3.then use:
$ python manage.py makemigrations appName
$ python manage.py migrate
/>

[enable Email services]
<1. signup to an email service for instance - SendGrid
2. Change config/settings.py
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
DEFAULT_FROM_EMAIL = 'your_custom_email_account'
EMAIL_HOST = 'smtp.sendgrid.net' # enter your email
EMAIL_HOST_USER = 'apikey'
EMAIL_HOST_PASSWORD = 'sendgrid_password' # enter your email
EMAIL_PORT = 587
EMAIL_USE_TLS = True
OR - if you want to display email on the terminal
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
/>

[Time zone]
<## config/settings.py
TIME_ZONE = 'America/New_York'
/>



<!-- .html
{% extends 'base.html' %} - extends the content from 'base.html' file to the file this is written on
<link href="{% static 'css/base.css' %}" rel="stylesheet"> # tell django to look for css/base.css inside static

method=post # send information
method=get # get information 
{% csrf_token %} # provide security
{{ form.as_p }} # display/render form/view attributes/fields as paragraph  (for instance ArticleUpdateView attributes are: 'title', 'body')
OR
{% load crispy_forms_tags %} # import crispy forms to the template
{{ form|crispy }} # display/render the form/view attributes/fields well designed


{% if user.is_authenticated %} # render what's inside the block only if the user is active
{% else %} # render what's inside the block only if the user isn't active 
{% endif %} # end if statemant 


{% for post in object_list %} # for loop using ListView
{% endfor %} # end of for loop

<a href="{% url 'post_detail' post.pk %}">{{ post.title }}</a> # link a button to a view, and add an object id (pk=id)

{% block content %} # on all the files that extends 'base.html' - information passes inside this block is displayed on the location of the 'base.html' block
{% endblock content %} # end of block

{% for comment in article.comments.all %} 
# we’re calling article.comments.all which means first look at the article model, then comments which is
# the related name of the entire Comment model, and select all included.

{% autoescape on %}
# protects against security issues like cross site scripting.

--- posts/views.py ---
class HomePageView(ListView):
  model = Post
  template_name = 'home.html'
  context_object_name = 'all_posts_list' ------- (change object_name to all_posts_list)

--- templates/home.html ---
{% for post in all_posts_list %}
{% endfor %}

-->

